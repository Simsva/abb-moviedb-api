<?php // -*- mode: php; -*-
// vim: ft=php sw=2 ts=2 et

// CORS
header("Access-Control-Allow-Origin: simsva.se");
header("Access-Control-Allow-Headers: Authorization, Origin, Content-Type, X-Auth-Token");
header("Access-Control-Allow-Methods: GET, POST, PATCH, DELETE");
header("Access-Control-Allow-Credentials: true");

// Get HTTP Basic credentials
if (isset($_SERVER["HTTP_AUTHORIZATION"])) {
  list($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']) = explode(':' , base64_decode(substr($_SERVER['HTTP_AUTHORIZATION'], 6)));
}
// Save PATCH request data
parse_str(file_get_contents('php://input'), $_PATCH);

// Get input variables
$api_vars = preg_split("/\//", ltrim($_SERVER["PATH_INFO"], '/'));
parse_str($_SERVER["QUERY_STRING"], $query_vars);

// Filter out empty variables
$api_vars = array_filter($api_vars, static function($var){return $var !== NULL && $var !== "";} );

$api_url = "{$_SERVER["REQUEST_SCHEME"]}://{$_SERVER["HTTP_HOST"]}{$_SERVER["SCRIPT_NAME"]}";

// Connect to Postgres
$config = include("./config/moviedb.php");
$pg_auth = "host=" . $config["host"] . " dbname=" . $config["dbname"] . " user=" . $config["user"] . " password=" . $config["password"];
$dbconn = pg_connect($pg_auth)
  or die("Could not connect to Postgres: " . pg_last_error());

// Get only specified fields/columns from Postgres query
// Safer than using user controlled data in the query
function get_fields($result, $fields) {
  if (isset($fields) && $fields !== "*") {
    $fields = preg_split("/,/", $fields);

    $out = array();
    while ($row = pg_fetch_array($result)) {
      $parsed_row = array();
      foreach ($fields as $field) {
        if (isset($row[$field])) {
          $parsed_row[$field] = $row[$field];
        }
      }
      $out[] = $parsed_row;
    }
  } else {
    $out = pg_fetch_all($result);
  }
  return $out;
}

function unauthorized() {
  http_response_code(401);
  header("WWW-Authenticate: Basic realm=\"MovieDB\"");
  die("Unauthorized");
}

// if $strict, then the public field is ignored
function is_authorized($uid, $strict = false) {
  global $dbconn, $authorization;

  if ($authorization == $uid) {
    return true;
  } else {
    pg_prepare($dbconn, "checkAuth", "SELECT public FROM users WHERE id = $1");
    $result = pg_execute($dbconn, "checkAuth", array($uid));
    $result = pg_fetch_array($result);
    if($strict)
      return false;
    else
      // PostgreSQL Boolean is apparently 't' or 'f'
      return isset($result["public"]) ? $result["public"] == 't' : false;
  }
}

function require_args($vars, $len) {
  if (sizeof($vars) < $len) {
    http_response_code(400);
    die("Invalid arguments");
  }
  return true;
}

// Set $authorization to user id if authenticated
$authorization = null;
if (isset($_SERVER["PHP_AUTH_USER"]) && isset($_SERVER["PHP_AUTH_PW"])) {
  pg_prepare($dbconn, "authorization", "SELECT password, id FROM users WHERE email = $1")
    or die("Failed to prepare query: " . pg_last_error());
  $result = pg_execute($dbconn, "authorization", array($_SERVER["PHP_AUTH_USER"]));
  $result = pg_fetch_array($result);

  $pass = $result["password"];
  $uid = $result["id"];
  if (isset($uid)) {
    if (isset($pass)) {
      if (password_verify($_SERVER["PHP_AUTH_PW"], $pass)) {
        $authorization = $uid;
      } else {
        http_response_code(401);
        die("Wrong credentials");
      }
    } else {
      $authorization = $uid;
    }
  }
}

switch ($api_vars[0]) {
case "entries":
  $sql = "SELECT * FROM full_entries";
  $vars = array();
  $i = 1;

  $search_columns = array("name", "description");

  if (sizeof($api_vars) > 1) {
    // Specify entry id
    if(!is_numeric($api_vars[1])) {
      http_response_code(400);
      die("Invalid entry ID");
    }

    $sql .= " WHERE full_entries.id = $" . $i++;
    $vars[] = $api_vars[1];
  } else if(isset($query_vars["search"])) {
    // Search for string in $search_columns
    $sql .= " WHERE";
    foreach($search_columns as $column)
      $sql .= " LOWER({$column}) LIKE LOWER('%{$query_vars["search"]}%') OR";
    $sql = rtrim($sql, " OR");
  }

  // Order by
  $accepted_orders = array("id", "name", "length", "description", "episodes", "category", "poster", "average_score");
  $accepted_directions = array("asc", "desc");
  if(isset($query_vars["order"]) and in_array($query_vars["order"], $accepted_orders)) {
    $dir = (isset($query_vars["order_direction"]) and in_array($query_vars["order_direction"], $accepted_directions))
         ? $query_vars["order_direction"] : "DESC";
    $sql .= " ORDER BY {$query_vars["order"]} " . $dir;
  }

  // Limit
  if(isset($query_vars["limit"]) and is_numeric($query_vars["limit"])) {
    $sql .= " LIMIT $" . $i++;
    $vars[] = $query_vars["limit"];
  }

  // Offset
  if(isset($query_vars["offset"]) and is_numeric($query_vars["offset"])) {
    $sql .= " OFFSET $" . $i++;
    $vars[] = $query_vars["offset"];
  }

  // Query
  pg_prepare($dbconn, "entries", $sql)
    or die("Failed to prepare query: " . pg_last_error());
  $result = pg_execute($dbconn, "entries", $vars);

  $result = get_fields($result, $query_vars["fields"]??null);
  if(sizeof($api_vars) > 1)
    $data = json_encode($result[0]);
  else
    $data = json_encode($result);

  if($data == "null") http_response_code(404);
  echo $data;
  break;

case "list":
  switch($_SERVER["REQUEST_METHOD"]) {
  case "GET":
    if (require_args($api_vars, 2)) {
      if (!is_authorized($api_vars[1])) {
        unauthorized();
      } else {
        $sql = "SELECT * FROM full_list WHERE user_id = $1";
        $vars = array($api_vars[1]);
        $i = 2;

        // Specify entry_id
        if(isset($api_vars[2])) {
          $sql .= " AND entry_id = $" . $i++;
          $vars[] = $api_vars[2];
        }

        // Order by
        $accepted_orders = array("user_id", "rewatch", "score", "review", "watch_status", "episodes_watched", "name",
                                "length", "description", "episodes", "category", "poster", "entry_id");
        $accepted_directions = array("asc", "desc");
        if(isset($query_vars["order"]) and in_array($query_vars["order"], $accepted_orders)) {
          $dir = (isset($query_vars["order_direction"]) and in_array($query_vars["order_direction"], $accepted_directions))
                ? $query_vars["order_direction"] : "DESC";
          $sql .= " ORDER BY {$query_vars["order"]} " . $dir;
        }

        // Limit
        if(isset($query_vars["limit"]) and is_numeric($query_vars["limit"])) {
          $sql .= " LIMIT $" . $i++;
          $vars[] = $query_vars["limit"];
        }

        // Offset
        if(isset($query_vars["offset"]) and is_numeric($query_vars["offset"])) {
          $sql .= " OFFSET $" . $i++;
          $vars[] = $query_vars["offset"];
        }

        // Request
        pg_prepare($dbconn, "list", $sql)
          or die("Failed to prepare query: " . pg_last_error());
        $result = pg_execute($dbconn, "list", $vars);

        // Return first element if entry_id is specified
        if(isset($api_vars[2]))
          $data = json_encode(get_fields($result, $query_vars["fields"]??null)[0]);
        else
          $data = json_encode(get_fields($result, $query_vars["fields"]??null));

        if($data == "null") http_response_code(404);
        echo $data;
      }
    }
    break;

  case "POST":
    if(require_args($api_vars, 2)) {
      if(!is_authorized($api_vars[1], true)) {
        unauthorized();
      } else {
        if(!isset($_POST["id"]) or !is_numeric($_POST["id"])) {
          http_response_code(400);
          die("Invalid entry ID");
        }

        // Check if entry exists
        pg_prepare($dbconn, "check_entry", "SELECT id FROM entries WHERE id = $1")
          or die("Failed to prepare query: " . pg_last_error());
        $result = pg_execute($dbconn, "check_entry", array($_POST["id"]));

        if (pg_fetch_row($result) == null) {
          http_response_code(404);
          die("Entry with specified ID not found");
        } else {
          // Check if entry is already in the list
          pg_prepare($dbconn, "check_in_list", "SELECT id FROM list_entries WHERE user_id = $1 AND entry_id = $2")
            or die("Failed to prepare query: " . pg_last_error());
          $result = pg_execute($dbconn, "check_in_list", array($api_vars[1], $_POST["id"]));

          if(pg_fetch_row($result) != null) {
            http_response_code(409);
            die("Entry ID already in users list");
          } else {
            // Add to list
            pg_prepare($dbconn, "add_to_list", "INSERT INTO list_entries (user_id, entry_id) VALUES ($1, $2)")
              or die("Failed to prepare query: " . pg_last_error());
            pg_execute($dbconn, "add_to_list", array($api_vars[1], $_POST["id"]));
          }
        }
      }
    }
    break;

  case "PATCH":
    if(require_args($api_vars, 3)) {
      if (!is_authorized($api_vars[1], true)) {
        unauthorized();
      } else {
        $allowed_keys = array(
          "rewatch" => "intval",
          "score" => "intval",
          "review" => "strval",
          "watch_status" => "strval",
          "episodes_watched" => "intval"
        );

        $keys = "";
        $vals = array($authorization, $api_vars[2]);
        $i = 3;
        foreach ($_PATCH as $key => $val) {
          if (in_array($key, array_keys($allowed_keys))) {
            $keys .= "{$key} = \$" . strval($i++) . ", ";
            array_push($vals, $allowed_keys[$key]($val));
          }
        }
        $keys = rtrim($keys, ", ");

        if($keys == '') {
          http_response_code(400);
          die("Nothing specified in request body");
        }

        $sql = "UPDATE list_entries SET " . $keys . " WHERE user_id = $1 AND entry_id = $2";
        pg_prepare($dbconn, "update_entry", $sql)
          or die("Failed to prepare query: " . pg_last_error());
        $result = pg_execute($dbconn, "update_entry", $vals);

        pg_last_error();
      }
    }
    break;

  case "DELETE":
    if(require_args($api_vars, 3)) {
      if(!is_authorized($api_vars[1], true)) {
        unauthorized();
      } else {
        pg_prepare($dbconn, "remove_from_list", "DELETE FROM list_entries WHERE user_id = $1 AND entry_id = $2")
          or die("Failed to prepare query: " . pg_last_error());
        $result = pg_execute($dbconn, "remove_from_list", array($api_vars[1], $api_vars[2]));

        if(pg_affected_rows($result) == 0) {
          http_response_code(404);
          die("List entry not found");
        }
      }
    }
    break;

  default:
    http_response_code(400);
    die("Invalid request method: " . $_SERVER["REQUEST_METHOD"]);
  }
  break;

case "users":
  $vars = array("id", "name", "email");

  foreach ($vars as $var) {
    if (isset($query_vars[$var])) {
      pg_prepare($dbconn, "users", "SELECT name, id, email FROM users WHERE " . $var . " = $1")
        or die("Failed to prepare query: " . pg_last_error());
      $result = pg_execute($dbconn, "users", array($query_vars[$var]));
      break;
    }
  }
  if (!isset($result)) {
    http_response_code(400);
    die("Invalid query");
  }

  $out = get_fields($result, $query_vars["fields"]??null)[0];
  echo $out == '' ? "null" : json_encode($out);
  break;

case "check_auth":
  if (isset($authorization)) {
    echo $authorization;
  } else {
    unauthorized();
  }
  break;

case "update_entry":
case "add_to_list":
case "remove_from_list":
  http_response_code(301);
  header("Deprecation: date=\"2021-10-21\"");
  header("Link: <{$api_url}/list/>; rel=\"alternate\"");
  die("410 Gone\nSee the <a href=\"{$api_url}_docs.html\">documentation for list/</a> for information");
  break;

case "get_reviews":
  header("Deprecation: date=\"2021-10-21\"");
  header("Link: <{$api_url}/reviews/>; rel=\"alternate\"");
case "reviews":
  if(require_args($api_vars, 2)) {
    if(!is_numeric($api_vars[1])) {
      http_response_code(400);
      die("Invalid entry ID");
    } else {
      pg_prepare($dbconn, "get_reviews", "SELECT review FROM list_entries WHERE entry_id = $1 AND review <> ''")
        or die("Failed to prepare query: " . pg_last_error());
      $result = pg_execute($dbconn, "get_reviews", array($api_vars[1]));
      $result = pg_fetch_all($result);

      $out = array();
      foreach($result as $val) {
        $out[] = $val["review"];
      }
      echo json_encode($out);
    }
  }
  break;

case "stats":
  if (require_args($api_vars, 2)) {
    if (!is_authorized($api_vars[1])) {
      unauthorized();
    } else {
      pg_prepare($dbconn, "stats", "SELECT * FROM statistics WHERE user_id = $1")
        or die("Failed to prepare query: " . pg_last_error());
      $result = pg_execute($dbconn, "stats", array($api_vars[1]));

      echo json_encode(get_fields($result, $query_vars["fields"]??null));
    }
  }
  break;

case "dump":
  print_r($_SERVER);
  print_r($_POST);
  print_r($_PATCH);
  break;

default:
  http_response_code(400);
  die("Invalid method: " . $api_vars[0]);
}
?>
